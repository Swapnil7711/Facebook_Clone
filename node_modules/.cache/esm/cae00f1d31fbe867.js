let refresh_tokenSecret,User,RefreshToken,CustomeErrorHandler,jsonToken;_31f‍.x([["default",()=>_31f‍.o]]);_31f‍.w("../config",[["refresh_tokenSecret",["refresh_tokenSecret"],function(v){refresh_tokenSecret=v}]]);_31f‍.w("../models",[["User",["User"],function(v){User=v}]]);_31f‍.w("../models/RefreshToken",[["default",["RefreshToken"],function(v){RefreshToken=v}]]);_31f‍.w("../services/CustomErrorHandler",[["default",["CustomeErrorHandler"],function(v){CustomeErrorHandler=v}]]);_31f‍.w("../services/jwtToken",[["default",["jsonToken"],function(v){jsonToken=v}]]);





const refreshController = {

    async refresh(req, res, next) {
        // check if toen exist in database

        try {

            const token = await RefreshToken.findOne({ token: req.body.token })

            if (!token) {
                return next(CustomeErrorHandler.unAuthorized("Invalid Token"))
            }

            const { _id } = await jsonToken.verify(token.token, refresh_tokenSecret)

            const deletePrevioudToken = await RefreshToken.deleteOne({ token: token.token })

            _31f‍.g.console.log(deletePrevioudToken)

            let user_id = _id

            try {

                const user = await User.findOne({ _id: user_id })

                _31f‍.g.console.log(user)

                if (!user) {
                    return next(CustomeErrorHandler.unAuthorized("No user Found"))
                }

                //  generate refresh token

                const access_token = jsonToken.sign({ email: user.email, name: user.first_name, _id: user._id })
                const refresh_token = jsonToken.sign({ email: user.email, name: user.first_name, _id: user._id }, refresh_tokenSecret, '1y')

                await RefreshToken.create({ token: refresh_token })
                res.json({ access_token: access_token, refresh_token: refresh_token })

            } catch (error) {

            }


        } catch (error) {
            return next(error)
        }
    }
}

_31f‍.d(refreshController);